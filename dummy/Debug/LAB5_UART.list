
LAB5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b68  08003b68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b70  08003b70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000074  08003bec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003bec  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008916  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f7  00000000  00000000  000289ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cd3  00000000  00000000  00040793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ed1  00000000  00000000  00049466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f34  00000000  00000000  000cf388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a60 	.word	0x08003a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003a60 	.word	0x08003a60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc28 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82a 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8e4 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8ba 	bl	800071c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f88e 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTDMAConfig();
 80005ac:	f000 f94c 	bl	8000848 <UARTDMAConfig>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	static uint16_t timestamp = 0;
	if(HAL_GetTick() >= timestamp)
 80005b0:	f000 fc82 	bl	8000eb8 <HAL_GetTick>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <main+0x58>)
 80005b8:	8812      	ldrh	r2, [r2, #0]
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d30b      	bcc.n	80005d6 <main+0x42>
	{
		timestamp = HAL_GetTick() + 50;
 80005be:	f000 fc7b 	bl	8000eb8 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	3332      	adds	r3, #50	; 0x32
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x58>)
 80005cc:	801a      	strh	r2, [r3, #0]
		ButtonUpdate();
 80005ce:	f000 f949 	bl	8000864 <ButtonUpdate>
		Process();
 80005d2:	f000 f989 	bl	80008e8 <Process>
	}
	LEDOnOff(led.Frequency, led.OnOffStatus);
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x5c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <main+0x5c>)
 80005dc:	f992 2002 	ldrsb.w	r2, [r2, #2]
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f950 	bl	8000888 <LEDOnOff>
  {
 80005e8:	e7e2      	b.n	80005b0 <main+0x1c>
 80005ea:	bf00      	nop
 80005ec:	20000278 	.word	0x20000278
 80005f0:	20000000 	.word	0x20000000

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fdb6 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fa7a 	bl	8001b74 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000686:	f000 fa25 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fcdc 	bl	8002064 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 fa0f 	bl	8000ad4 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f001 fed0 	bl	80024a4 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f9e3 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000090 	.word	0x20000090
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_DMA_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_DMA_Init+0x4c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2010      	movs	r0, #16
 8000744:	f000 fc9f 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000748:	2010      	movs	r0, #16
 800074a:	f000 fcb8 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2011      	movs	r0, #17
 8000754:	f000 fc97 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000758:	2011      	movs	r0, #17
 800075a:	f000 fcb0 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2c      	ldr	r2, [pc, #176]	; (800083c <MX_GPIO_Init+0xd0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	; (800083c <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007f8:	f001 f988 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_GPIO_Init+0xd8>)
 8000814:	f000 ffde 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000830:	f000 ffd0 	bl	80017d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <UARTDMAConfig>:

/* USER CODE BEGIN 4 */
void UARTDMAConfig()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	//Start UART in DMA mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	4903      	ldr	r1, [pc, #12]	; (800085c <UARTDMAConfig+0x14>)
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <UARTDMAConfig+0x18>)
 8000852:	f001 ff06 	bl	8002662 <HAL_UART_Receive_DMA>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000025c 	.word	0x2000025c
 8000860:	20000090 	.word	0x20000090

08000864 <ButtonUpdate>:
			HAL_UART_Transmit(&huart2, TxBuffer, strlen((char*)TxBuffer), 10);
		}
}

void ButtonUpdate()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	button1.CurrentStatus =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <ButtonUpdate+0x1c>)
 800086e:	f001 f935 	bl	8001adc <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	b25a      	sxtb	r2, r3
 8000876:	4b03      	ldr	r3, [pc, #12]	; (8000884 <ButtonUpdate+0x20>)
 8000878:	705a      	strb	r2, [r3, #1]
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40020800 	.word	0x40020800
 8000884:	20000274 	.word	0x20000274

08000888 <LEDOnOff>:

void LEDOnOff(uint16_t Hz,int8_t status)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	80fb      	strh	r3, [r7, #6]
 8000894:	4613      	mov	r3, r2
 8000896:	717b      	strb	r3, [r7, #5]
	static uint32_t timestampLED = 0;
	if(status == 1)
 8000898:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d112      	bne.n	80008c6 <LEDOnOff+0x3e>
	{
		if(HAL_GetTick() >= timestampLED)
 80008a0:	f000 fb0a 	bl	8000eb8 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <LEDOnOff+0x58>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d313      	bcc.n	80008d6 <LEDOnOff+0x4e>
		{
			timestampLED = HAL_GetTick() + Hz;
 80008ae:	f000 fb03 	bl	8000eb8 <HAL_GetTick>
 80008b2:	4602      	mov	r2, r0
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <LEDOnOff+0x58>)
 80008ba:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008bc:	2120      	movs	r1, #32
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <LEDOnOff+0x5c>)
 80008c0:	f001 f93d 	bl	8001b3e <HAL_GPIO_TogglePin>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		timestampLED = 0;
	}

}
 80008c4:	e007      	b.n	80008d6 <LEDOnOff+0x4e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <LEDOnOff+0x5c>)
 80008cc:	f001 f91e 	bl	8001b0c <HAL_GPIO_WritePin>
		timestampLED = 0;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <LEDOnOff+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000027c 	.word	0x2000027c
 80008e4:	40020000 	.word	0x40020000

080008e8 <Process>:

void Process()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	switch(processState)
 80008ec:	4b6e      	ldr	r3, [pc, #440]	; (8000aa8 <Process+0x1c0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d07e      	beq.n	80009f2 <Process+0x10a>
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	f300 80d4 	bgt.w	8000aa2 <Process+0x1ba>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <Process+0x1c>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d011      	beq.n	8000926 <Process+0x3e>
		}

	break;
	}

}
 8000902:	e0ce      	b.n	8000aa2 <Process+0x1ba>
		if(RxBuffer[0] == '0')
 8000904:	4b69      	ldr	r3, [pc, #420]	; (8000aac <Process+0x1c4>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b30      	cmp	r3, #48	; 0x30
 800090a:	d103      	bne.n	8000914 <Process+0x2c>
			processState = LED_CONTROL;
 800090c:	4b66      	ldr	r3, [pc, #408]	; (8000aa8 <Process+0x1c0>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	break;
 8000912:	e0c3      	b.n	8000a9c <Process+0x1b4>
		else if(RxBuffer[0] == '1')
 8000914:	4b65      	ldr	r3, [pc, #404]	; (8000aac <Process+0x1c4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b31      	cmp	r3, #49	; 0x31
 800091a:	f040 80bf 	bne.w	8000a9c <Process+0x1b4>
			processState = BUTTON_STATUS;
 800091e:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <Process+0x1c0>)
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
	break;
 8000924:	e0ba      	b.n	8000a9c <Process+0x1b4>
		sprintf((char*)text, "MODE : BUTTON STATUS\r\n");
 8000926:	4962      	ldr	r1, [pc, #392]	; (8000ab0 <Process+0x1c8>)
 8000928:	4862      	ldr	r0, [pc, #392]	; (8000ab4 <Process+0x1cc>)
 800092a:	f002 fc2b 	bl	8003184 <siprintf>
		HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 800092e:	4861      	ldr	r0, [pc, #388]	; (8000ab4 <Process+0x1cc>)
 8000930:	f7ff fc56 	bl	80001e0 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	230a      	movs	r3, #10
 800093a:	495e      	ldr	r1, [pc, #376]	; (8000ab4 <Process+0x1cc>)
 800093c:	485e      	ldr	r0, [pc, #376]	; (8000ab8 <Process+0x1d0>)
 800093e:	f001 fdfe 	bl	800253e <HAL_UART_Transmit>
		if(RxBuffer[0] == 'x')
 8000942:	4b5a      	ldr	r3, [pc, #360]	; (8000aac <Process+0x1c4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b78      	cmp	r3, #120	; 0x78
 8000948:	d103      	bne.n	8000952 <Process+0x6a>
			processState = INIT;
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <Process+0x1c0>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	break;
 8000950:	e0a7      	b.n	8000aa2 <Process+0x1ba>
		else if(RxBuffer[0] == 'a')
 8000952:	4b56      	ldr	r3, [pc, #344]	; (8000aac <Process+0x1c4>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b61      	cmp	r3, #97	; 0x61
 8000958:	d109      	bne.n	800096e <Process+0x86>
			led.Frequency += 1;
 800095a:	4b58      	ldr	r3, [pc, #352]	; (8000abc <Process+0x1d4>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b56      	ldr	r3, [pc, #344]	; (8000abc <Process+0x1d4>)
 8000964:	801a      	strh	r2, [r3, #0]
			processState = LED_CONTROL;
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <Process+0x1c0>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
	break;
 800096c:	e099      	b.n	8000aa2 <Process+0x1ba>
		else if(RxBuffer[0] == 's')
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <Process+0x1c4>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b73      	cmp	r3, #115	; 0x73
 8000974:	d11c      	bne.n	80009b0 <Process+0xc8>
			if(led.Frequency > 0)
 8000976:	4b51      	ldr	r3, [pc, #324]	; (8000abc <Process+0x1d4>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <Process+0xa4>
				led.Frequency -= 1;
 800097e:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <Process+0x1d4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	3b01      	subs	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <Process+0x1d4>)
 8000988:	801a      	strh	r2, [r3, #0]
 800098a:	e00d      	b.n	80009a8 <Process+0xc0>
				sprintf((char*)text, "Frequency can not less than zero.\r\n");
 800098c:	494c      	ldr	r1, [pc, #304]	; (8000ac0 <Process+0x1d8>)
 800098e:	4849      	ldr	r0, [pc, #292]	; (8000ab4 <Process+0x1cc>)
 8000990:	f002 fbf8 	bl	8003184 <siprintf>
				HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 8000994:	4847      	ldr	r0, [pc, #284]	; (8000ab4 <Process+0x1cc>)
 8000996:	f7ff fc23 	bl	80001e0 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	230a      	movs	r3, #10
 80009a0:	4944      	ldr	r1, [pc, #272]	; (8000ab4 <Process+0x1cc>)
 80009a2:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <Process+0x1d0>)
 80009a4:	f001 fdcb 	bl	800253e <HAL_UART_Transmit>
			processState = LED_CONTROL;
 80009a8:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <Process+0x1c0>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
	break;
 80009ae:	e078      	b.n	8000aa2 <Process+0x1ba>
		else if(RxBuffer[0] == 'd')
 80009b0:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <Process+0x1c4>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b64      	cmp	r3, #100	; 0x64
 80009b6:	d10a      	bne.n	80009ce <Process+0xe6>
			led.OnOffStatus = ~led.OnOffStatus;
 80009b8:	4b40      	ldr	r3, [pc, #256]	; (8000abc <Process+0x1d4>)
 80009ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80009be:	43db      	mvns	r3, r3
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <Process+0x1d4>)
 80009c4:	709a      	strb	r2, [r3, #2]
			processState = LED_CONTROL;
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <Process+0x1c0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
	break;
 80009cc:	e069      	b.n	8000aa2 <Process+0x1ba>
			sprintf((char*)text, "Not a command.\r\n");
 80009ce:	493d      	ldr	r1, [pc, #244]	; (8000ac4 <Process+0x1dc>)
 80009d0:	4838      	ldr	r0, [pc, #224]	; (8000ab4 <Process+0x1cc>)
 80009d2:	f002 fbd7 	bl	8003184 <siprintf>
			HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 80009d6:	4837      	ldr	r0, [pc, #220]	; (8000ab4 <Process+0x1cc>)
 80009d8:	f7ff fc02 	bl	80001e0 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	230a      	movs	r3, #10
 80009e2:	4934      	ldr	r1, [pc, #208]	; (8000ab4 <Process+0x1cc>)
 80009e4:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <Process+0x1d0>)
 80009e6:	f001 fdaa 	bl	800253e <HAL_UART_Transmit>
			processState = LED_CONTROL;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <Process+0x1c0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
	break;
 80009f0:	e057      	b.n	8000aa2 <Process+0x1ba>
		sprintf((char*)text, "MODE : BUTTON STATUS\r\n");
 80009f2:	492f      	ldr	r1, [pc, #188]	; (8000ab0 <Process+0x1c8>)
 80009f4:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <Process+0x1cc>)
 80009f6:	f002 fbc5 	bl	8003184 <siprintf>
		HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 80009fa:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <Process+0x1cc>)
 80009fc:	f7ff fbf0 	bl	80001e0 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	230a      	movs	r3, #10
 8000a06:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <Process+0x1cc>)
 8000a08:	482b      	ldr	r0, [pc, #172]	; (8000ab8 <Process+0x1d0>)
 8000a0a:	f001 fd98 	bl	800253e <HAL_UART_Transmit>
		if(button1.CurrentStatus == 1)
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <Process+0x1e0>)
 8000a10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d111      	bne.n	8000a3c <Process+0x154>
			sprintf((char*)text, "Button Status : Press ");
 8000a18:	492c      	ldr	r1, [pc, #176]	; (8000acc <Process+0x1e4>)
 8000a1a:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <Process+0x1cc>)
 8000a1c:	f002 fbb2 	bl	8003184 <siprintf>
			HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <Process+0x1cc>)
 8000a22:	f7ff fbdd 	bl	80001e0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	4921      	ldr	r1, [pc, #132]	; (8000ab4 <Process+0x1cc>)
 8000a2e:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <Process+0x1d0>)
 8000a30:	f001 fd85 	bl	800253e <HAL_UART_Transmit>
			processState = BUTTON_STATUS;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <Process+0x1c0>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e027      	b.n	8000a8c <Process+0x1a4>
		else if(button1.CurrentStatus == 0)
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <Process+0x1e0>)
 8000a3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d111      	bne.n	8000a6a <Process+0x182>
			sprintf((char*)text, "Button Status : Unpress ");
 8000a46:	4922      	ldr	r1, [pc, #136]	; (8000ad0 <Process+0x1e8>)
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <Process+0x1cc>)
 8000a4a:	f002 fb9b 	bl	8003184 <siprintf>
			HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 8000a4e:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <Process+0x1cc>)
 8000a50:	f7ff fbc6 	bl	80001e0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	230a      	movs	r3, #10
 8000a5a:	4916      	ldr	r1, [pc, #88]	; (8000ab4 <Process+0x1cc>)
 8000a5c:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <Process+0x1d0>)
 8000a5e:	f001 fd6e 	bl	800253e <HAL_UART_Transmit>
			processState = BUTTON_STATUS;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <Process+0x1c0>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e010      	b.n	8000a8c <Process+0x1a4>
			sprintf((char*)text, "Not a command.\r\n");
 8000a6a:	4916      	ldr	r1, [pc, #88]	; (8000ac4 <Process+0x1dc>)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <Process+0x1cc>)
 8000a6e:	f002 fb89 	bl	8003184 <siprintf>
			HAL_UART_Transmit(&huart2, text, strlen((char*)text), 10);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <Process+0x1cc>)
 8000a74:	f7ff fbb4 	bl	80001e0 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <Process+0x1cc>)
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <Process+0x1d0>)
 8000a82:	f001 fd5c 	bl	800253e <HAL_UART_Transmit>
			processState = BUTTON_STATUS;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Process+0x1c0>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	701a      	strb	r2, [r3, #0]
		if(RxBuffer[0] == 'x')
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <Process+0x1c4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b78      	cmp	r3, #120	; 0x78
 8000a92:	d105      	bne.n	8000aa0 <Process+0x1b8>
			processState = INIT;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Process+0x1c0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	break;
 8000a9a:	e001      	b.n	8000aa0 <Process+0x1b8>
	break;
 8000a9c:	bf00      	nop
 8000a9e:	e000      	b.n	8000aa2 <Process+0x1ba>
	break;
 8000aa0:	bf00      	nop
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000270 	.word	0x20000270
 8000aac:	2000025c 	.word	0x2000025c
 8000ab0:	08003a90 	.word	0x08003a90
 8000ab4:	20000194 	.word	0x20000194
 8000ab8:	20000090 	.word	0x20000090
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	08003aa8 	.word	0x08003aa8
 8000ac4:	08003acc 	.word	0x08003acc
 8000ac8:	20000274 	.word	0x20000274
 8000acc:	08003ae0 	.word	0x08003ae0
 8000ad0:	08003af8 	.word	0x08003af8

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f000 faa6 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_UART_MspInit+0x140>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	f040 8089 	bne.w	8000c66 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <HAL_UART_MspInit+0x144>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4834      	ldr	r0, [pc, #208]	; (8000c78 <HAL_UART_MspInit+0x148>)
 8000ba8:	f000 fe14 	bl	80017d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bae:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <HAL_UART_MspInit+0x150>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bee:	4823      	ldr	r0, [pc, #140]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000bf0:	f000 fa80 	bl	80010f4 <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000bfa:	f7ff ff6b 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_UART_MspInit+0x14c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_UART_MspInit+0x158>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c4c:	f000 fa52 	bl	80010f4 <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c56:	f7ff ff3d 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_UART_MspInit+0x154>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	200000d4 	.word	0x200000d4
 8000c80:	40026088 	.word	0x40026088
 8000c84:	20000134 	.word	0x20000134
 8000c88:	400260a0 	.word	0x400260a0

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8da 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ce6:	f000 fb0b 	bl	8001300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000d4 	.word	0x200000d4

08000cf4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DMA1_Stream6_IRQHandler+0x10>)
 8000cfa:	f000 fb01 	bl	8001300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000134 	.word	0x20000134

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f002 f9f2 	bl	8003120 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20000280 	.word	0x20000280
 8000d70:	20000298 	.word	0x20000298

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f002 f9b1 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fbe3 	bl	8000594 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ddc:	08003b78 	.word	0x08003b78
  ldr r2, =_sbss
 8000de0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000de4:	20000298 	.word	0x20000298

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f92b 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe5e 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f943 	bl	80010da <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f90b 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000004 	.word	0x20000004
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	20000284 	.word	0x20000284

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000284 	.word	0x20000284

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff29 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff3e 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff31 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa2 	bl	800102c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff feda 	bl	8000eb8 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e099      	b.n	8001244 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001130:	e00f      	b.n	8001152 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001132:	f7ff fec1 	bl	8000eb8 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b05      	cmp	r3, #5
 800113e:	d908      	bls.n	8001152 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2220      	movs	r2, #32
 8001144:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e078      	b.n	8001244 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e8      	bne.n	8001132 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <HAL_DMA_Init+0x158>)
 800116c:	4013      	ands	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d107      	bne.n	80011bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4313      	orrs	r3, r2
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f023 0307 	bic.w	r3, r3, #7
 80011d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4313      	orrs	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d117      	bne.n	8001216 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fa6f 	bl	80016dc <DMA_CheckFifoParam>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001212:	2301      	movs	r3, #1
 8001214:	e016      	b.n	8001244 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fa26 	bl	8001670 <DMA_CalcBaseAndBitshift>
 8001224:	4603      	mov	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	223f      	movs	r2, #63	; 0x3f
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	f010803f 	.word	0xf010803f

08001250 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_DMA_Start_IT+0x26>
 8001272:	2302      	movs	r3, #2
 8001274:	e040      	b.n	80012f8 <HAL_DMA_Start_IT+0xa8>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d12f      	bne.n	80012ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2202      	movs	r2, #2
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f9b8 	bl	8001614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0216 	orr.w	r2, r2, #22
 80012be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0208 	orr.w	r2, r2, #8
 80012d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e005      	b.n	80012f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012f2:	2302      	movs	r3, #2
 80012f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800130c:	4b8e      	ldr	r3, [pc, #568]	; (8001548 <HAL_DMA_IRQHandler+0x248>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a8e      	ldr	r2, [pc, #568]	; (800154c <HAL_DMA_IRQHandler+0x24c>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0a9b      	lsrs	r3, r3, #10
 8001318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132a:	2208      	movs	r2, #8
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01a      	beq.n	800136c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0204 	bic.w	r2, r2, #4
 8001352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	2208      	movs	r2, #8
 800135a:	409a      	lsls	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2201      	movs	r2, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d012      	beq.n	80013a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	2201      	movs	r2, #1
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f043 0202 	orr.w	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2204      	movs	r2, #4
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d012      	beq.n	80013d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	2204      	movs	r2, #4
 80013c6:	409a      	lsls	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d0:	f043 0204 	orr.w	r2, r3, #4
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	2210      	movs	r2, #16
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d043      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03c      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2210      	movs	r2, #16
 80013fc:	409a      	lsls	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d018      	beq.n	8001442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
 800142e:	e01f      	b.n	8001470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
 8001440:	e016      	b.n	8001470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0208 	bic.w	r2, r2, #8
 800145e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2220      	movs	r2, #32
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 808f 	beq.w	80015a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8087 	beq.w	80015a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	2220      	movs	r2, #32
 8001498:	409a      	lsls	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d136      	bne.n	8001518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0216 	bic.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_DMA_IRQHandler+0x1da>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0208 	bic.w	r2, r2, #8
 80014e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	223f      	movs	r2, #63	; 0x3f
 80014f0:	409a      	lsls	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150a:	2b00      	cmp	r3, #0
 800150c:	d07e      	beq.n	800160c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
        }
        return;
 8001516:	e079      	b.n	800160c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01d      	beq.n	8001562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10d      	bne.n	8001550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	2b00      	cmp	r3, #0
 800153a:	d031      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
 8001544:	e02c      	b.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
 8001546:	bf00      	nop
 8001548:	20000004 	.word	0x20000004
 800154c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d023      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e01e      	b.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10f      	bne.n	8001590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0210 	bic.w	r2, r2, #16
 800157e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d032      	beq.n	800160e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2205      	movs	r2, #5
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d307      	bcc.n	80015e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f2      	bne.n	80015cc <HAL_DMA_IRQHandler+0x2cc>
 80015e6:	e000      	b.n	80015ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
 800160a:	e000      	b.n	800160e <HAL_DMA_IRQHandler+0x30e>
        return;
 800160c:	bf00      	nop
    }
  }
}
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d108      	bne.n	8001654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001652:	e007      	b.n	8001664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	60da      	str	r2, [r3, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3b10      	subs	r3, #16
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <DMA_CalcBaseAndBitshift+0x68>)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d909      	bls.n	80016b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	; 0x58
 80016b0:	e007      	b.n	80016c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	aaaaaaab 	.word	0xaaaaaaab
 80016d8:	08003b2c 	.word	0x08003b2c

080016dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11f      	bne.n	8001736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d856      	bhi.n	80017aa <DMA_CheckFifoParam+0xce>
 80016fc:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <DMA_CheckFifoParam+0x28>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001715 	.word	0x08001715
 8001708:	08001727 	.word	0x08001727
 800170c:	08001715 	.word	0x08001715
 8001710:	080017ab 	.word	0x080017ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d046      	beq.n	80017ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001724:	e043      	b.n	80017ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800172e:	d140      	bne.n	80017b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001734:	e03d      	b.n	80017b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173e:	d121      	bne.n	8001784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d837      	bhi.n	80017b6 <DMA_CheckFifoParam+0xda>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <DMA_CheckFifoParam+0x70>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	08001763 	.word	0x08001763
 8001754:	0800175d 	.word	0x0800175d
 8001758:	08001775 	.word	0x08001775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      break;
 8001760:	e030      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d025      	beq.n	80017ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001772:	e022      	b.n	80017ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800177c:	d11f      	bne.n	80017be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001782:	e01c      	b.n	80017be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d903      	bls.n	8001792 <DMA_CheckFifoParam+0xb6>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d003      	beq.n	8001798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001790:	e018      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
      break;
 8001796:	e015      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00e      	beq.n	80017c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
      break;
 80017a8:	e00b      	b.n	80017c2 <DMA_CheckFifoParam+0xe6>
      break;
 80017aa:	bf00      	nop
 80017ac:	e00a      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ae:	bf00      	nop
 80017b0:	e008      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e006      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e004      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e002      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <DMA_CheckFifoParam+0xe8>
      break;
 80017c2:	bf00      	nop
    }
  } 
  
  return status; 
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e159      	b.n	8001aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8148 	bne.w	8001a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a2 	beq.w	8001a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x202>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x1fe>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x1f6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x1f2>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x204>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f aea2 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	400b      	ands	r3, r1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e267      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d112      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e242      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x74>
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6f      	ldr	r2, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a68      	ldr	r2, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f944 	bl	8000eb8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff f940 	bl	8000eb8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e207      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xc0>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f930 	bl	8000eb8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f92c 	bl	8000eb8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1f3      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0xe8>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e1c7      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	e03a      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f8e5 	bl	8000eb8 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f8e1 	bl	8000eb8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1a8      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f8c4 	bl	8000eb8 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff f8c0 	bl	8000eb8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e187      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d036      	beq.n	8001dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f8a4 	bl	8000eb8 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff f8a0 	bl	8000eb8 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e167      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
 8001d92:	e01b      	b.n	8001dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f88d 	bl	8000eb8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	e00e      	b.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f889 	bl	8000eb8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d907      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e150      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470000 	.word	0x42470000
 8001dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ea      	bne.n	8001da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8097 	beq.w	8001f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7ff f849 	bl	8000eb8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff f845 	bl	8000eb8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e10c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ea>
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x30c>
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e80:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 0304 	bic.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f80a 	bl	8000eb8 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f806 	bl	8000eb8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0cb      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0ee      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fff4 	bl	8000eb8 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fff0 	bl	8000eb8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0b5      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ee      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a1 	beq.w	8002054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d05c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d141      	bne.n	8001faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ffc4 	bl	8000eb8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe ffc0 	bl	8000eb8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e087      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff99 	bl	8000eb8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe ff95 	bl	8000eb8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e05c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x416>
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff82 	bl	8000eb8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ff7e 	bl	8000eb8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e045      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e038      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4ec>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d028      	beq.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cc      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d90c      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d044      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d119      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e067      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe feb0 	bl	8000eb8 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe feac 	bl	8000eb8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e04f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d20c      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fe10 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	08003b14 	.word	0x08003b14
 8002228:	20000004 	.word	0x20000004
 800222c:	20000008 	.word	0x20000008

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b094      	sub	sp, #80	; 0x50
 8002236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
 800223c:	2300      	movs	r3, #0
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002240:	2300      	movs	r3, #0
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002248:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d00d      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x40>
 8002254:	2b08      	cmp	r3, #8
 8002256:	f200 80e1 	bhi.w	800241c <HAL_RCC_GetSysClockFreq+0x1ec>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 800225e:	2b04      	cmp	r3, #4
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3a>
 8002262:	e0db      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_GetSysClockFreq+0x204>)
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002268:	e0db      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226a:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCC_GetSysClockFreq+0x208>)
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800226e:	e0d8      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	2200      	movs	r2, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
 800229e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b4:	0150      	lsls	r0, r2, #5
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4621      	mov	r1, r4
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	6139      	str	r1, [r7, #16]
 80022c0:	4629      	mov	r1, r5
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d4:	4659      	mov	r1, fp
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	4651      	mov	r1, sl
 80022da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022de:	4651      	mov	r1, sl
 80022e0:	018a      	lsls	r2, r1, #6
 80022e2:	4651      	mov	r1, sl
 80022e4:	ebb2 0801 	subs.w	r8, r2, r1
 80022e8:	4659      	mov	r1, fp
 80022ea:	eb63 0901 	sbc.w	r9, r3, r1
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002302:	4690      	mov	r8, r2
 8002304:	4699      	mov	r9, r3
 8002306:	4623      	mov	r3, r4
 8002308:	eb18 0303 	adds.w	r3, r8, r3
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	462b      	mov	r3, r5
 8002310:	eb49 0303 	adc.w	r3, r9, r3
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002322:	4629      	mov	r1, r5
 8002324:	024b      	lsls	r3, r1, #9
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800232c:	4621      	mov	r1, r4
 800232e:	024a      	lsls	r2, r1, #9
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800233c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002340:	f7fd ffa6 	bl	8000290 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800234c:	e058      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	2200      	movs	r2, #0
 8002356:	4618      	mov	r0, r3
 8002358:	4611      	mov	r1, r2
 800235a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002368:	4642      	mov	r2, r8
 800236a:	464b      	mov	r3, r9
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	0159      	lsls	r1, r3, #5
 8002376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237a:	0150      	lsls	r0, r2, #5
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4641      	mov	r1, r8
 8002382:	ebb2 0a01 	subs.w	sl, r2, r1
 8002386:	4649      	mov	r1, r9
 8002388:	eb63 0b01 	sbc.w	fp, r3, r1
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800239c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a0:	ebb2 040a 	subs.w	r4, r2, sl
 80023a4:	eb63 050b 	sbc.w	r5, r3, fp
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	00eb      	lsls	r3, r5, #3
 80023b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023b6:	00e2      	lsls	r2, r4, #3
 80023b8:	4614      	mov	r4, r2
 80023ba:	461d      	mov	r5, r3
 80023bc:	4643      	mov	r3, r8
 80023be:	18e3      	adds	r3, r4, r3
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	464b      	mov	r3, r9
 80023c4:	eb45 0303 	adc.w	r3, r5, r3
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023d6:	4629      	mov	r1, r5
 80023d8:	028b      	lsls	r3, r1, #10
 80023da:	4621      	mov	r1, r4
 80023dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e0:	4621      	mov	r1, r4
 80023e2:	028a      	lsls	r2, r1, #10
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	2200      	movs	r2, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	61fa      	str	r2, [r7, #28]
 80023f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f4:	f7fd ff4c 	bl	8000290 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4613      	mov	r3, r2
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0x200>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	3301      	adds	r3, #1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetSysClockFreq+0x204>)
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002424:	4618      	mov	r0, r3
 8002426:	3750      	adds	r7, #80	; 0x50
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a9b      	lsrs	r3, r3, #10
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	08003b24 	.word	0x08003b24

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002480:	f7ff ffdc 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0b5b      	lsrs	r3, r3, #13
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4903      	ldr	r1, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	08003b24 	.word	0x08003b24

080024a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e03f      	b.n	8002536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fb30 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fba5 	bl	8002c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d17c      	bne.n	8002658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_Transmit+0x2c>
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e075      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_UART_Transmit+0x3e>
 8002578:	2302      	movs	r3, #2
 800257a:	e06e      	b.n	800265a <HAL_UART_Transmit+0x11c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002592:	f7fe fc91 	bl	8000eb8 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025d0:	e02a      	b.n	8002628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f992 	bl	8002906 <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e036      	b.n	800265a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3302      	adds	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e007      	b.n	800261a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1cf      	bne.n	80025d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2200      	movs	r2, #0
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f962 	bl	8002906 <UART_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	4613      	mov	r3, r2
 800266e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b20      	cmp	r3, #32
 800267a:	d11d      	bne.n	80026b8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_UART_Receive_DMA+0x26>
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e016      	b.n	80026ba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_UART_Receive_DMA+0x38>
 8002696:	2302      	movs	r3, #2
 8002698:	e00f      	b.n	80026ba <HAL_UART_Receive_DMA+0x58>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f998 	bl	80029e4 <UART_Start_Receive_DMA>
 80026b4:	4603      	mov	r3, r0
 80026b6:	e000      	b.n	80026ba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b09c      	sub	sp, #112	; 0x70
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d172      	bne.n	8002818 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	2200      	movs	r2, #0
 8002736:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	e853 3f00 	ldrex	r3, [r3]
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800274e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	330c      	adds	r3, #12
 8002756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002758:	65ba      	str	r2, [r7, #88]	; 0x58
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800275e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002760:	e841 2300 	strex	r3, r2, [r1]
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e5      	bne.n	8002738 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	667b      	str	r3, [r7, #100]	; 0x64
 8002784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800278c:	647a      	str	r2, [r7, #68]	; 0x44
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800279a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	623b      	str	r3, [r7, #32]
   return(result);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
 80027b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c0:	633a      	str	r2, [r7, #48]	; 0x30
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c8:	e841 2300 	strex	r3, r2, [r1]
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e5      	bne.n	80027a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d119      	bne.n	8002818 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0310 	bic.w	r3, r3, #16
 80027fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	617b      	str	r3, [r7, #20]
   return(result);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e5      	bne.n	80027e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002824:	4619      	mov	r1, r3
 8002826:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002828:	f7ff ff69 	bl	80026fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800282c:	e002      	b.n	8002834 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800282e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002830:	f7ff ff47 	bl	80026c2 <HAL_UART_RxCpltCallback>
}
 8002834:	bf00      	nop
 8002836:	3770      	adds	r7, #112	; 0x70
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff ff4e 	bl	80026fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002862:	e002      	b.n	800286a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff36 	bl	80026d6 <HAL_UART_RxHalfCpltCallback>
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b21      	cmp	r3, #33	; 0x21
 80028a4:	d108      	bne.n	80028b8 <UART_DMAError+0x46>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80028b2:	68b8      	ldr	r0, [r7, #8]
 80028b4:	f000 f934 	bl	8002b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b22      	cmp	r3, #34	; 0x22
 80028d8:	d108      	bne.n	80028ec <UART_DMAError+0x7a>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f000 f942 	bl	8002b70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f7ff fef6 	bl	80026ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b090      	sub	sp, #64	; 0x40
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4613      	mov	r3, r2
 8002914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002916:	e050      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d04c      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0x30>
 8002926:	f7fe fac7 	bl	8000eb8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002932:	429a      	cmp	r2, r3
 8002934:	d241      	bcs.n	80029ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002956:	637a      	str	r2, [r7, #52]	; 0x34
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800295c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e5      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	613b      	str	r3, [r7, #16]
   return(result);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800298a:	623a      	str	r2, [r7, #32]
 800298c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	69f9      	ldr	r1, [r7, #28]
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	61bb      	str	r3, [r7, #24]
   return(result);
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e5      	bne.n	800296a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e00f      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d09f      	beq.n	8002918 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3740      	adds	r7, #64	; 0x40
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b098      	sub	sp, #96	; 0x60
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2222      	movs	r2, #34	; 0x22
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	4a40      	ldr	r2, [pc, #256]	; (8002b14 <UART_Start_Receive_DMA+0x130>)
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <UART_Start_Receive_DMA+0x134>)
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	4a3e      	ldr	r2, [pc, #248]	; (8002b1c <UART_Start_Receive_DMA+0x138>)
 8002a22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2200      	movs	r2, #0
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	f7fe fc04 	bl	8001250 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d019      	beq.n	8002aa2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ac2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e5      	bne.n	8002aa2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aec:	653b      	str	r3, [r7, #80]	; 0x50
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002af6:	627a      	str	r2, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e5      	bne.n	8002ad6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3760      	adds	r7, #96	; 0x60
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	08002717 	.word	0x08002717
 8002b18:	0800283d 	.word	0x0800283d
 8002b1c:	08002873 	.word	0x08002873

08002b20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	61ba      	str	r2, [r7, #24]
 8002b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6979      	ldr	r1, [r7, #20]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	613b      	str	r3, [r7, #16]
   return(result);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e5      	bne.n	8002b28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002b64:	bf00      	nop
 8002b66:	3724      	adds	r7, #36	; 0x24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b095      	sub	sp, #84	; 0x54
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b98:	643a      	str	r2, [r7, #64]	; 0x40
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d119      	bne.n	8002c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0310 	bic.w	r3, r3, #16
 8002bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c08:	61ba      	str	r2, [r7, #24]
 8002c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6979      	ldr	r1, [r7, #20]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	613b      	str	r3, [r7, #16]
   return(result);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c2a:	bf00      	nop
 8002c2c:	3754      	adds	r7, #84	; 0x54
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b0c0      	sub	sp, #256	; 0x100
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	ea40 0301 	orr.w	r3, r0, r1
 8002c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c90:	f021 010c 	bic.w	r1, r1, #12
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	6999      	ldr	r1, [r3, #24]
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	ea40 0301 	orr.w	r3, r0, r1
 8002cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b8f      	ldr	r3, [pc, #572]	; (8002f04 <UART_SetConfig+0x2cc>)
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d005      	beq.n	8002cd8 <UART_SetConfig+0xa0>
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <UART_SetConfig+0x2d0>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d104      	bne.n	8002ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff fbd0 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8002cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ce0:	e003      	b.n	8002cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff fbb7 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf4:	f040 810c 	bne.w	8002f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	1891      	adds	r1, r2, r2
 8002d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d12:	415b      	adcs	r3, r3
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	eb12 0801 	adds.w	r8, r2, r1
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb43 0901 	adc.w	r9, r3, r1
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3a:	4690      	mov	r8, r2
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	eb18 0303 	adds.w	r3, r8, r3
 8002d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d48:	462b      	mov	r3, r5
 8002d4a:	eb49 0303 	adc.w	r3, r9, r3
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d66:	460b      	mov	r3, r1
 8002d68:	18db      	adds	r3, r3, r3
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	eb42 0303 	adc.w	r3, r2, r3
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
 8002d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d7c:	f7fd fa88 	bl	8000290 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002d86:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	011c      	lsls	r4, r3, #4
 8002d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	1891      	adds	r1, r2, r2
 8002da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da8:	415b      	adcs	r3, r3
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002db0:	4641      	mov	r1, r8
 8002db2:	eb12 0a01 	adds.w	sl, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb43 0b01 	adc.w	fp, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd0:	4692      	mov	sl, r2
 8002dd2:	469b      	mov	fp, r3
 8002dd4:	4643      	mov	r3, r8
 8002dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb4b 0303 	adc.w	r3, fp, r3
 8002de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	18db      	adds	r3, r3, r3
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
 8002e02:	4613      	mov	r3, r2
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e12:	f7fd fa3d 	bl	8000290 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2264      	movs	r2, #100	; 0x64
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e34:	fba3 2302 	umull	r2, r3, r3, r2
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e40:	441c      	add	r4, r3
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e64:	4641      	mov	r1, r8
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	00cb      	lsls	r3, r1, #3
 8002e80:	4651      	mov	r1, sl
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	4651      	mov	r1, sl
 8002e88:	00ca      	lsls	r2, r1, #3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4642      	mov	r2, r8
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb8:	460b      	mov	r3, r1
 8002eba:	18db      	adds	r3, r3, r3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	eb42 0303 	adc.w	r3, r2, r3
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ece:	f7fd f9df 	bl	8000290 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	2164      	movs	r1, #100	; 0x64
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	3332      	adds	r3, #50	; 0x32
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	f003 0207 	and.w	r2, r3, #7
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4422      	add	r2, r4
 8002efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f00:	e105      	b.n	800310e <UART_SetConfig+0x4d6>
 8002f02:	bf00      	nop
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f22:	4642      	mov	r2, r8
 8002f24:	464b      	mov	r3, r9
 8002f26:	1891      	adds	r1, r2, r2
 8002f28:	6239      	str	r1, [r7, #32]
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	4641      	mov	r1, r8
 8002f34:	1854      	adds	r4, r2, r1
 8002f36:	4649      	mov	r1, r9
 8002f38:	eb43 0501 	adc.w	r5, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	00eb      	lsls	r3, r5, #3
 8002f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4a:	00e2      	lsls	r2, r4, #3
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	18e3      	adds	r3, r4, r3
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f58:	464b      	mov	r3, r9
 8002f5a:	eb45 0303 	adc.w	r3, r5, r3
 8002f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7e:	4629      	mov	r1, r5
 8002f80:	008b      	lsls	r3, r1, #2
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f88:	4621      	mov	r1, r4
 8002f8a:	008a      	lsls	r2, r1, #2
 8002f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f90:	f7fd f97e 	bl	8000290 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b60      	ldr	r3, [pc, #384]	; (800311c <UART_SetConfig+0x4e4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	61b9      	str	r1, [r7, #24]
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	1851      	adds	r1, r2, r1
 8002fc8:	6139      	str	r1, [r7, #16]
 8002fca:	4649      	mov	r1, r9
 8002fcc:	414b      	adcs	r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	00cb      	lsls	r3, r1, #3
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	00ca      	lsls	r2, r1, #3
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
 800300e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800301c:	4649      	mov	r1, r9
 800301e:	008b      	lsls	r3, r1, #2
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003026:	4641      	mov	r1, r8
 8003028:	008a      	lsls	r2, r1, #2
 800302a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302e:	f7fd f92f 	bl	8000290 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <UART_SetConfig+0x4e4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <UART_SetConfig+0x4e4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003056:	441c      	add	r4, r3
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	673b      	str	r3, [r7, #112]	; 0x70
 8003060:	677a      	str	r2, [r7, #116]	; 0x74
 8003062:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	1891      	adds	r1, r2, r2
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	415b      	adcs	r3, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003076:	4641      	mov	r1, r8
 8003078:	1851      	adds	r1, r2, r1
 800307a:	6039      	str	r1, [r7, #0]
 800307c:	4649      	mov	r1, r9
 800307e:	414b      	adcs	r3, r1
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308e:	4659      	mov	r1, fp
 8003090:	00cb      	lsls	r3, r1, #3
 8003092:	4651      	mov	r1, sl
 8003094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003098:	4651      	mov	r1, sl
 800309a:	00ca      	lsls	r2, r1, #3
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	4642      	mov	r2, r8
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
 80030bc:	667a      	str	r2, [r7, #100]	; 0x64
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ca:	4649      	mov	r1, r9
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4641      	mov	r1, r8
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4641      	mov	r1, r8
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030dc:	f7fd f8d8 	bl	8000290 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <UART_SetConfig+0x4e4>)
 80030e6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2164      	movs	r1, #100	; 0x64
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <UART_SetConfig+0x4e4>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4422      	add	r2, r4
 800310c:	609a      	str	r2, [r3, #8]
}
 800310e:	bf00      	nop
 8003110:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	51eb851f 	.word	0x51eb851f

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 fc8e 	bl	8003a60 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003b70 	.word	0x08003b70
 8003168:	08003b70 	.word	0x08003b70
 800316c:	08003b70 	.word	0x08003b70
 8003170:	08003b74 	.word	0x08003b74

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <siprintf>:
 8003184:	b40e      	push	{r1, r2, r3}
 8003186:	b500      	push	{lr}
 8003188:	b09c      	sub	sp, #112	; 0x70
 800318a:	ab1d      	add	r3, sp, #116	; 0x74
 800318c:	9002      	str	r0, [sp, #8]
 800318e:	9006      	str	r0, [sp, #24]
 8003190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <siprintf+0x38>)
 8003196:	9107      	str	r1, [sp, #28]
 8003198:	9104      	str	r1, [sp, #16]
 800319a:	4909      	ldr	r1, [pc, #36]	; (80031c0 <siprintf+0x3c>)
 800319c:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a0:	9105      	str	r1, [sp, #20]
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	a902      	add	r1, sp, #8
 80031a8:	f000 f868 	bl	800327c <_svfiprintf_r>
 80031ac:	9b02      	ldr	r3, [sp, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	b01c      	add	sp, #112	; 0x70
 80031b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b8:	b003      	add	sp, #12
 80031ba:	4770      	bx	lr
 80031bc:	20000010 	.word	0x20000010
 80031c0:	ffff0208 	.word	0xffff0208

080031c4 <__ssputs_r>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	688e      	ldr	r6, [r1, #8]
 80031ca:	429e      	cmp	r6, r3
 80031cc:	4682      	mov	sl, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	461f      	mov	r7, r3
 80031d4:	d838      	bhi.n	8003248 <__ssputs_r+0x84>
 80031d6:	898a      	ldrh	r2, [r1, #12]
 80031d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031dc:	d032      	beq.n	8003244 <__ssputs_r+0x80>
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	6909      	ldr	r1, [r1, #16]
 80031e2:	eba5 0901 	sub.w	r9, r5, r1
 80031e6:	6965      	ldr	r5, [r4, #20]
 80031e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f0:	3301      	adds	r3, #1
 80031f2:	444b      	add	r3, r9
 80031f4:	106d      	asrs	r5, r5, #1
 80031f6:	429d      	cmp	r5, r3
 80031f8:	bf38      	it	cc
 80031fa:	461d      	movcc	r5, r3
 80031fc:	0553      	lsls	r3, r2, #21
 80031fe:	d531      	bpl.n	8003264 <__ssputs_r+0xa0>
 8003200:	4629      	mov	r1, r5
 8003202:	f000 fb63 	bl	80038cc <_malloc_r>
 8003206:	4606      	mov	r6, r0
 8003208:	b950      	cbnz	r0, 8003220 <__ssputs_r+0x5c>
 800320a:	230c      	movs	r3, #12
 800320c:	f8ca 3000 	str.w	r3, [sl]
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	464a      	mov	r2, r9
 8003224:	f000 fabe 	bl	80037a4 <memcpy>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	6126      	str	r6, [r4, #16]
 8003236:	6165      	str	r5, [r4, #20]
 8003238:	444e      	add	r6, r9
 800323a:	eba5 0509 	sub.w	r5, r5, r9
 800323e:	6026      	str	r6, [r4, #0]
 8003240:	60a5      	str	r5, [r4, #8]
 8003242:	463e      	mov	r6, r7
 8003244:	42be      	cmp	r6, r7
 8003246:	d900      	bls.n	800324a <__ssputs_r+0x86>
 8003248:	463e      	mov	r6, r7
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	4632      	mov	r2, r6
 800324e:	4641      	mov	r1, r8
 8003250:	f000 fab6 	bl	80037c0 <memmove>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	1b9b      	subs	r3, r3, r6
 8003258:	60a3      	str	r3, [r4, #8]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	4433      	add	r3, r6
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	2000      	movs	r0, #0
 8003262:	e7db      	b.n	800321c <__ssputs_r+0x58>
 8003264:	462a      	mov	r2, r5
 8003266:	f000 fba5 	bl	80039b4 <_realloc_r>
 800326a:	4606      	mov	r6, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1e1      	bne.n	8003234 <__ssputs_r+0x70>
 8003270:	6921      	ldr	r1, [r4, #16]
 8003272:	4650      	mov	r0, sl
 8003274:	f000 fabe 	bl	80037f4 <_free_r>
 8003278:	e7c7      	b.n	800320a <__ssputs_r+0x46>
	...

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4698      	mov	r8, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	b09d      	sub	sp, #116	; 0x74
 8003288:	4607      	mov	r7, r0
 800328a:	460d      	mov	r5, r1
 800328c:	4614      	mov	r4, r2
 800328e:	d50e      	bpl.n	80032ae <_svfiprintf_r+0x32>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b963      	cbnz	r3, 80032ae <_svfiprintf_r+0x32>
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f000 fb19 	bl	80038cc <_malloc_r>
 800329a:	6028      	str	r0, [r5, #0]
 800329c:	6128      	str	r0, [r5, #16]
 800329e:	b920      	cbnz	r0, 80032aa <_svfiprintf_r+0x2e>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	e0d1      	b.n	800344e <_svfiprintf_r+0x1d2>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	616b      	str	r3, [r5, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	2320      	movs	r3, #32
 80032b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032bc:	2330      	movs	r3, #48	; 0x30
 80032be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003468 <_svfiprintf_r+0x1ec>
 80032c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c6:	f04f 0901 	mov.w	r9, #1
 80032ca:	4623      	mov	r3, r4
 80032cc:	469a      	mov	sl, r3
 80032ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d2:	b10a      	cbz	r2, 80032d8 <_svfiprintf_r+0x5c>
 80032d4:	2a25      	cmp	r2, #37	; 0x25
 80032d6:	d1f9      	bne.n	80032cc <_svfiprintf_r+0x50>
 80032d8:	ebba 0b04 	subs.w	fp, sl, r4
 80032dc:	d00b      	beq.n	80032f6 <_svfiprintf_r+0x7a>
 80032de:	465b      	mov	r3, fp
 80032e0:	4622      	mov	r2, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ff6d 	bl	80031c4 <__ssputs_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 80aa 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 80032f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f2:	445a      	add	r2, fp
 80032f4:	9209      	str	r2, [sp, #36]	; 0x24
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a2 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 8003300:	2300      	movs	r3, #0
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330a:	f10a 0a01 	add.w	sl, sl, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9307      	str	r3, [sp, #28]
 8003312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003316:	931a      	str	r3, [sp, #104]	; 0x68
 8003318:	4654      	mov	r4, sl
 800331a:	2205      	movs	r2, #5
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	4851      	ldr	r0, [pc, #324]	; (8003468 <_svfiprintf_r+0x1ec>)
 8003322:	f7fc ff65 	bl	80001f0 <memchr>
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xe6>
 800332a:	06d0      	lsls	r0, r2, #27
 800332c:	bf44      	itt	mi
 800332e:	2320      	movmi	r3, #32
 8003330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003334:	0711      	lsls	r1, r2, #28
 8003336:	bf44      	itt	mi
 8003338:	232b      	movmi	r3, #43	; 0x2b
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333e:	f89a 3000 	ldrb.w	r3, [sl]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d015      	beq.n	8003372 <_svfiprintf_r+0xf6>
 8003346:	9a07      	ldr	r2, [sp, #28]
 8003348:	4654      	mov	r4, sl
 800334a:	2000      	movs	r0, #0
 800334c:	f04f 0c0a 	mov.w	ip, #10
 8003350:	4621      	mov	r1, r4
 8003352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003356:	3b30      	subs	r3, #48	; 0x30
 8003358:	2b09      	cmp	r3, #9
 800335a:	d94e      	bls.n	80033fa <_svfiprintf_r+0x17e>
 800335c:	b1b0      	cbz	r0, 800338c <_svfiprintf_r+0x110>
 800335e:	9207      	str	r2, [sp, #28]
 8003360:	e014      	b.n	800338c <_svfiprintf_r+0x110>
 8003362:	eba0 0308 	sub.w	r3, r0, r8
 8003366:	fa09 f303 	lsl.w	r3, r9, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	46a2      	mov	sl, r4
 8003370:	e7d2      	b.n	8003318 <_svfiprintf_r+0x9c>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfbb      	ittet	lt
 800337e:	425b      	neglt	r3, r3
 8003380:	f042 0202 	orrlt.w	r2, r2, #2
 8003384:	9307      	strge	r3, [sp, #28]
 8003386:	9307      	strlt	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	9204      	strlt	r2, [sp, #16]
 800338c:	7823      	ldrb	r3, [r4, #0]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d10c      	bne.n	80033ac <_svfiprintf_r+0x130>
 8003392:	7863      	ldrb	r3, [r4, #1]
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d135      	bne.n	8003404 <_svfiprintf_r+0x188>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bfb8      	it	lt
 80033a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a8:	3402      	adds	r4, #2
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003478 <_svfiprintf_r+0x1fc>
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4650      	mov	r0, sl
 80033b6:	f7fc ff1b 	bl	80001f0 <memchr>
 80033ba:	b140      	cbz	r0, 80033ce <_svfiprintf_r+0x152>
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	eba0 000a 	sub.w	r0, r0, sl
 80033c2:	fa03 f000 	lsl.w	r0, r3, r0
 80033c6:	9b04      	ldr	r3, [sp, #16]
 80033c8:	4303      	orrs	r3, r0
 80033ca:	3401      	adds	r4, #1
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	4826      	ldr	r0, [pc, #152]	; (800346c <_svfiprintf_r+0x1f0>)
 80033d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d8:	2206      	movs	r2, #6
 80033da:	f7fc ff09 	bl	80001f0 <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d038      	beq.n	8003454 <_svfiprintf_r+0x1d8>
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <_svfiprintf_r+0x1f4>)
 80033e4:	bb1b      	cbnz	r3, 800342e <_svfiprintf_r+0x1b2>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	4433      	add	r3, r6
 80033f6:	9309      	str	r3, [sp, #36]	; 0x24
 80033f8:	e767      	b.n	80032ca <_svfiprintf_r+0x4e>
 80033fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fe:	460c      	mov	r4, r1
 8003400:	2001      	movs	r0, #1
 8003402:	e7a5      	b.n	8003350 <_svfiprintf_r+0xd4>
 8003404:	2300      	movs	r3, #0
 8003406:	3401      	adds	r4, #1
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 0c0a 	mov.w	ip, #10
 8003410:	4620      	mov	r0, r4
 8003412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003416:	3a30      	subs	r2, #48	; 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d903      	bls.n	8003424 <_svfiprintf_r+0x1a8>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c5      	beq.n	80033ac <_svfiprintf_r+0x130>
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	e7c3      	b.n	80033ac <_svfiprintf_r+0x130>
 8003424:	fb0c 2101 	mla	r1, ip, r1, r2
 8003428:	4604      	mov	r4, r0
 800342a:	2301      	movs	r3, #1
 800342c:	e7f0      	b.n	8003410 <_svfiprintf_r+0x194>
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <_svfiprintf_r+0x1f8>)
 8003436:	a904      	add	r1, sp, #16
 8003438:	4638      	mov	r0, r7
 800343a:	f3af 8000 	nop.w
 800343e:	1c42      	adds	r2, r0, #1
 8003440:	4606      	mov	r6, r0
 8003442:	d1d6      	bne.n	80033f2 <_svfiprintf_r+0x176>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af2c 	bmi.w	80032a4 <_svfiprintf_r+0x28>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	462a      	mov	r2, r5
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <_svfiprintf_r+0x1f8>)
 800345c:	a904      	add	r1, sp, #16
 800345e:	4638      	mov	r0, r7
 8003460:	f000 f87a 	bl	8003558 <_printf_i>
 8003464:	e7eb      	b.n	800343e <_svfiprintf_r+0x1c2>
 8003466:	bf00      	nop
 8003468:	08003b34 	.word	0x08003b34
 800346c:	08003b3e 	.word	0x08003b3e
 8003470:	00000000 	.word	0x00000000
 8003474:	080031c5 	.word	0x080031c5
 8003478:	08003b3a 	.word	0x08003b3a

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4616      	mov	r6, r2
 8003482:	4699      	mov	r9, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800348c:	4293      	cmp	r3, r2
 800348e:	bfb8      	it	lt
 8003490:	4613      	movlt	r3, r2
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003498:	4607      	mov	r7, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b10a      	cbz	r2, 80034a2 <_printf_common+0x26>
 800349e:	3301      	adds	r3, #1
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	6833      	ldrmi	r3, [r6, #0]
 80034aa:	3302      	addmi	r3, #2
 80034ac:	6033      	strmi	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d106      	bne.n	80034c4 <_printf_common+0x48>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	6832      	ldr	r2, [r6, #0]
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dc26      	bgt.n	8003512 <_printf_common+0x96>
 80034c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c8:	1e13      	subs	r3, r2, #0
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	0692      	lsls	r2, r2, #26
 80034d2:	d42b      	bmi.n	800352c <_printf_common+0xb0>
 80034d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d8:	4649      	mov	r1, r9
 80034da:	4638      	mov	r0, r7
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d01e      	beq.n	8003520 <_printf_common+0xa4>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	68e5      	ldr	r5, [r4, #12]
 80034e6:	6832      	ldr	r2, [r6, #0]
 80034e8:	f003 0306 	and.w	r3, r3, #6
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	bf08      	it	eq
 80034f0:	1aad      	subeq	r5, r5, r2
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	bf0c      	ite	eq
 80034f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034fc:	2500      	movne	r5, #0
 80034fe:	4293      	cmp	r3, r2
 8003500:	bfc4      	itt	gt
 8003502:	1a9b      	subgt	r3, r3, r2
 8003504:	18ed      	addgt	r5, r5, r3
 8003506:	2600      	movs	r6, #0
 8003508:	341a      	adds	r4, #26
 800350a:	42b5      	cmp	r5, r6
 800350c:	d11a      	bne.n	8003544 <_printf_common+0xc8>
 800350e:	2000      	movs	r0, #0
 8003510:	e008      	b.n	8003524 <_printf_common+0xa8>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4649      	mov	r1, r9
 8003518:	4638      	mov	r0, r7
 800351a:	47c0      	blx	r8
 800351c:	3001      	adds	r0, #1
 800351e:	d103      	bne.n	8003528 <_printf_common+0xac>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	3501      	adds	r5, #1
 800352a:	e7c6      	b.n	80034ba <_printf_common+0x3e>
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	2030      	movs	r0, #48	; 0x30
 8003532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003536:	4422      	add	r2, r4
 8003538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003540:	3302      	adds	r3, #2
 8003542:	e7c7      	b.n	80034d4 <_printf_common+0x58>
 8003544:	2301      	movs	r3, #1
 8003546:	4622      	mov	r2, r4
 8003548:	4649      	mov	r1, r9
 800354a:	4638      	mov	r0, r7
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d0e6      	beq.n	8003520 <_printf_common+0xa4>
 8003552:	3601      	adds	r6, #1
 8003554:	e7d9      	b.n	800350a <_printf_common+0x8e>
	...

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	7e0f      	ldrb	r7, [r1, #24]
 800355e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003560:	2f78      	cmp	r7, #120	; 0x78
 8003562:	4691      	mov	r9, r2
 8003564:	4680      	mov	r8, r0
 8003566:	460c      	mov	r4, r1
 8003568:	469a      	mov	sl, r3
 800356a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	; 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d8 	beq.w	800372a <_printf_i+0x1d2>
 800357a:	2f58      	cmp	r7, #88	; 0x58
 800357c:	f000 80a3 	beq.w	80036c6 <_printf_i+0x16e>
 8003580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a101      	add	r1, pc, #4	; (adr r1, 8003598 <_printf_i+0x40>)
 8003594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003711 	.word	0x08003711
 80035c8:	08003635 	.word	0x08003635
 80035cc:	080036f3 	.word	0x080036f3
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003733 	.word	0x08003733
 80035dc:	08003581 	.word	0x08003581
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036fb 	.word	0x080036fb
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	602a      	str	r2, [r5, #0]
 80035f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e0a3      	b.n	800374c <_printf_i+0x1f4>
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	6829      	ldr	r1, [r5, #0]
 8003608:	0606      	lsls	r6, r0, #24
 800360a:	f101 0304 	add.w	r3, r1, #4
 800360e:	d50a      	bpl.n	8003626 <_printf_i+0xce>
 8003610:	680e      	ldr	r6, [r1, #0]
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	2e00      	cmp	r6, #0
 8003616:	da03      	bge.n	8003620 <_printf_i+0xc8>
 8003618:	232d      	movs	r3, #45	; 0x2d
 800361a:	4276      	negs	r6, r6
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003620:	485e      	ldr	r0, [pc, #376]	; (800379c <_printf_i+0x244>)
 8003622:	230a      	movs	r3, #10
 8003624:	e019      	b.n	800365a <_printf_i+0x102>
 8003626:	680e      	ldr	r6, [r1, #0]
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800362e:	bf18      	it	ne
 8003630:	b236      	sxthne	r6, r6
 8003632:	e7ef      	b.n	8003614 <_printf_i+0xbc>
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	1d19      	adds	r1, r3, #4
 800363a:	6029      	str	r1, [r5, #0]
 800363c:	0601      	lsls	r1, r0, #24
 800363e:	d501      	bpl.n	8003644 <_printf_i+0xec>
 8003640:	681e      	ldr	r6, [r3, #0]
 8003642:	e002      	b.n	800364a <_printf_i+0xf2>
 8003644:	0646      	lsls	r6, r0, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0xe8>
 8003648:	881e      	ldrh	r6, [r3, #0]
 800364a:	4854      	ldr	r0, [pc, #336]	; (800379c <_printf_i+0x244>)
 800364c:	2f6f      	cmp	r7, #111	; 0x6f
 800364e:	bf0c      	ite	eq
 8003650:	2308      	moveq	r3, #8
 8003652:	230a      	movne	r3, #10
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365a:	6865      	ldr	r5, [r4, #4]
 800365c:	60a5      	str	r5, [r4, #8]
 800365e:	2d00      	cmp	r5, #0
 8003660:	bfa2      	ittt	ge
 8003662:	6821      	ldrge	r1, [r4, #0]
 8003664:	f021 0104 	bicge.w	r1, r1, #4
 8003668:	6021      	strge	r1, [r4, #0]
 800366a:	b90e      	cbnz	r6, 8003670 <_printf_i+0x118>
 800366c:	2d00      	cmp	r5, #0
 800366e:	d04d      	beq.n	800370c <_printf_i+0x1b4>
 8003670:	4615      	mov	r5, r2
 8003672:	fbb6 f1f3 	udiv	r1, r6, r3
 8003676:	fb03 6711 	mls	r7, r3, r1, r6
 800367a:	5dc7      	ldrb	r7, [r0, r7]
 800367c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003680:	4637      	mov	r7, r6
 8003682:	42bb      	cmp	r3, r7
 8003684:	460e      	mov	r6, r1
 8003686:	d9f4      	bls.n	8003672 <_printf_i+0x11a>
 8003688:	2b08      	cmp	r3, #8
 800368a:	d10b      	bne.n	80036a4 <_printf_i+0x14c>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	07de      	lsls	r6, r3, #31
 8003690:	d508      	bpl.n	80036a4 <_printf_i+0x14c>
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	6861      	ldr	r1, [r4, #4]
 8003696:	4299      	cmp	r1, r3
 8003698:	bfde      	ittt	le
 800369a:	2330      	movle	r3, #48	; 0x30
 800369c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036a4:	1b52      	subs	r2, r2, r5
 80036a6:	6122      	str	r2, [r4, #16]
 80036a8:	f8cd a000 	str.w	sl, [sp]
 80036ac:	464b      	mov	r3, r9
 80036ae:	aa03      	add	r2, sp, #12
 80036b0:	4621      	mov	r1, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	f7ff fee2 	bl	800347c <_printf_common>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d14c      	bne.n	8003756 <_printf_i+0x1fe>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	b004      	add	sp, #16
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c6:	4835      	ldr	r0, [pc, #212]	; (800379c <_printf_i+0x244>)
 80036c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036cc:	6829      	ldr	r1, [r5, #0]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80036d4:	6029      	str	r1, [r5, #0]
 80036d6:	061d      	lsls	r5, r3, #24
 80036d8:	d514      	bpl.n	8003704 <_printf_i+0x1ac>
 80036da:	07df      	lsls	r7, r3, #31
 80036dc:	bf44      	itt	mi
 80036de:	f043 0320 	orrmi.w	r3, r3, #32
 80036e2:	6023      	strmi	r3, [r4, #0]
 80036e4:	b91e      	cbnz	r6, 80036ee <_printf_i+0x196>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f023 0320 	bic.w	r3, r3, #32
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	2310      	movs	r3, #16
 80036f0:	e7b0      	b.n	8003654 <_printf_i+0xfc>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	2378      	movs	r3, #120	; 0x78
 80036fc:	4828      	ldr	r0, [pc, #160]	; (80037a0 <_printf_i+0x248>)
 80036fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003702:	e7e3      	b.n	80036cc <_printf_i+0x174>
 8003704:	0659      	lsls	r1, r3, #25
 8003706:	bf48      	it	mi
 8003708:	b2b6      	uxthmi	r6, r6
 800370a:	e7e6      	b.n	80036da <_printf_i+0x182>
 800370c:	4615      	mov	r5, r2
 800370e:	e7bb      	b.n	8003688 <_printf_i+0x130>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6826      	ldr	r6, [r4, #0]
 8003714:	6961      	ldr	r1, [r4, #20]
 8003716:	1d18      	adds	r0, r3, #4
 8003718:	6028      	str	r0, [r5, #0]
 800371a:	0635      	lsls	r5, r6, #24
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	d501      	bpl.n	8003724 <_printf_i+0x1cc>
 8003720:	6019      	str	r1, [r3, #0]
 8003722:	e002      	b.n	800372a <_printf_i+0x1d2>
 8003724:	0670      	lsls	r0, r6, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0x1c8>
 8003728:	8019      	strh	r1, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	4615      	mov	r5, r2
 8003730:	e7ba      	b.n	80036a8 <_printf_i+0x150>
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	602a      	str	r2, [r5, #0]
 8003738:	681d      	ldr	r5, [r3, #0]
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	2100      	movs	r1, #0
 800373e:	4628      	mov	r0, r5
 8003740:	f7fc fd56 	bl	80001f0 <memchr>
 8003744:	b108      	cbz	r0, 800374a <_printf_i+0x1f2>
 8003746:	1b40      	subs	r0, r0, r5
 8003748:	6060      	str	r0, [r4, #4]
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	2300      	movs	r3, #0
 8003750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003754:	e7a8      	b.n	80036a8 <_printf_i+0x150>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	462a      	mov	r2, r5
 800375a:	4649      	mov	r1, r9
 800375c:	4640      	mov	r0, r8
 800375e:	47d0      	blx	sl
 8003760:	3001      	adds	r0, #1
 8003762:	d0ab      	beq.n	80036bc <_printf_i+0x164>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	079b      	lsls	r3, r3, #30
 8003768:	d413      	bmi.n	8003792 <_printf_i+0x23a>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	4298      	cmp	r0, r3
 8003770:	bfb8      	it	lt
 8003772:	4618      	movlt	r0, r3
 8003774:	e7a4      	b.n	80036c0 <_printf_i+0x168>
 8003776:	2301      	movs	r3, #1
 8003778:	4632      	mov	r2, r6
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	47d0      	blx	sl
 8003780:	3001      	adds	r0, #1
 8003782:	d09b      	beq.n	80036bc <_printf_i+0x164>
 8003784:	3501      	adds	r5, #1
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	9903      	ldr	r1, [sp, #12]
 800378a:	1a5b      	subs	r3, r3, r1
 800378c:	42ab      	cmp	r3, r5
 800378e:	dcf2      	bgt.n	8003776 <_printf_i+0x21e>
 8003790:	e7eb      	b.n	800376a <_printf_i+0x212>
 8003792:	2500      	movs	r5, #0
 8003794:	f104 0619 	add.w	r6, r4, #25
 8003798:	e7f5      	b.n	8003786 <_printf_i+0x22e>
 800379a:	bf00      	nop
 800379c:	08003b45 	.word	0x08003b45
 80037a0:	08003b56 	.word	0x08003b56

080037a4 <memcpy>:
 80037a4:	440a      	add	r2, r1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	4770      	bx	lr
 80037b0:	b510      	push	{r4, lr}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ba:	4291      	cmp	r1, r2
 80037bc:	d1f9      	bne.n	80037b2 <memcpy+0xe>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <memmove>:
 80037c0:	4288      	cmp	r0, r1
 80037c2:	b510      	push	{r4, lr}
 80037c4:	eb01 0402 	add.w	r4, r1, r2
 80037c8:	d902      	bls.n	80037d0 <memmove+0x10>
 80037ca:	4284      	cmp	r4, r0
 80037cc:	4623      	mov	r3, r4
 80037ce:	d807      	bhi.n	80037e0 <memmove+0x20>
 80037d0:	1e43      	subs	r3, r0, #1
 80037d2:	42a1      	cmp	r1, r4
 80037d4:	d008      	beq.n	80037e8 <memmove+0x28>
 80037d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037de:	e7f8      	b.n	80037d2 <memmove+0x12>
 80037e0:	4402      	add	r2, r0
 80037e2:	4601      	mov	r1, r0
 80037e4:	428a      	cmp	r2, r1
 80037e6:	d100      	bne.n	80037ea <memmove+0x2a>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f2:	e7f7      	b.n	80037e4 <memmove+0x24>

080037f4 <_free_r>:
 80037f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037f6:	2900      	cmp	r1, #0
 80037f8:	d044      	beq.n	8003884 <_free_r+0x90>
 80037fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fe:	9001      	str	r0, [sp, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f1a1 0404 	sub.w	r4, r1, #4
 8003806:	bfb8      	it	lt
 8003808:	18e4      	addlt	r4, r4, r3
 800380a:	f000 f913 	bl	8003a34 <__malloc_lock>
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <_free_r+0x94>)
 8003810:	9801      	ldr	r0, [sp, #4]
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	b933      	cbnz	r3, 8003824 <_free_r+0x30>
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	6014      	str	r4, [r2, #0]
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003820:	f000 b90e 	b.w	8003a40 <__malloc_unlock>
 8003824:	42a3      	cmp	r3, r4
 8003826:	d908      	bls.n	800383a <_free_r+0x46>
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	1961      	adds	r1, r4, r5
 800382c:	428b      	cmp	r3, r1
 800382e:	bf01      	itttt	eq
 8003830:	6819      	ldreq	r1, [r3, #0]
 8003832:	685b      	ldreq	r3, [r3, #4]
 8003834:	1949      	addeq	r1, r1, r5
 8003836:	6021      	streq	r1, [r4, #0]
 8003838:	e7ed      	b.n	8003816 <_free_r+0x22>
 800383a:	461a      	mov	r2, r3
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b10b      	cbz	r3, 8003844 <_free_r+0x50>
 8003840:	42a3      	cmp	r3, r4
 8003842:	d9fa      	bls.n	800383a <_free_r+0x46>
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	1855      	adds	r5, r2, r1
 8003848:	42a5      	cmp	r5, r4
 800384a:	d10b      	bne.n	8003864 <_free_r+0x70>
 800384c:	6824      	ldr	r4, [r4, #0]
 800384e:	4421      	add	r1, r4
 8003850:	1854      	adds	r4, r2, r1
 8003852:	42a3      	cmp	r3, r4
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	d1e0      	bne.n	800381a <_free_r+0x26>
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	4421      	add	r1, r4
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	e7da      	b.n	800381a <_free_r+0x26>
 8003864:	d902      	bls.n	800386c <_free_r+0x78>
 8003866:	230c      	movs	r3, #12
 8003868:	6003      	str	r3, [r0, #0]
 800386a:	e7d6      	b.n	800381a <_free_r+0x26>
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	1961      	adds	r1, r4, r5
 8003870:	428b      	cmp	r3, r1
 8003872:	bf04      	itt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	bf04      	itt	eq
 800387c:	1949      	addeq	r1, r1, r5
 800387e:	6021      	streq	r1, [r4, #0]
 8003880:	6054      	str	r4, [r2, #4]
 8003882:	e7ca      	b.n	800381a <_free_r+0x26>
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
 8003888:	20000288 	.word	0x20000288

0800388c <sbrk_aligned>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4e0e      	ldr	r6, [pc, #56]	; (80038c8 <sbrk_aligned+0x3c>)
 8003890:	460c      	mov	r4, r1
 8003892:	6831      	ldr	r1, [r6, #0]
 8003894:	4605      	mov	r5, r0
 8003896:	b911      	cbnz	r1, 800389e <sbrk_aligned+0x12>
 8003898:	f000 f8bc 	bl	8003a14 <_sbrk_r>
 800389c:	6030      	str	r0, [r6, #0]
 800389e:	4621      	mov	r1, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 f8b7 	bl	8003a14 <_sbrk_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d00a      	beq.n	80038c0 <sbrk_aligned+0x34>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d007      	beq.n	80038c4 <sbrk_aligned+0x38>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 f8ac 	bl	8003a14 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d101      	bne.n	80038c4 <sbrk_aligned+0x38>
 80038c0:	f04f 34ff 	mov.w	r4, #4294967295
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	2000028c 	.word	0x2000028c

080038cc <_malloc_r>:
 80038cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d0:	1ccd      	adds	r5, r1, #3
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	2d00      	cmp	r5, #0
 80038e0:	4607      	mov	r7, r0
 80038e2:	db01      	blt.n	80038e8 <_malloc_r+0x1c>
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	d905      	bls.n	80038f4 <_malloc_r+0x28>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	2600      	movs	r6, #0
 80038ee:	4630      	mov	r0, r6
 80038f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f4:	4e2e      	ldr	r6, [pc, #184]	; (80039b0 <_malloc_r+0xe4>)
 80038f6:	f000 f89d 	bl	8003a34 <__malloc_lock>
 80038fa:	6833      	ldr	r3, [r6, #0]
 80038fc:	461c      	mov	r4, r3
 80038fe:	bb34      	cbnz	r4, 800394e <_malloc_r+0x82>
 8003900:	4629      	mov	r1, r5
 8003902:	4638      	mov	r0, r7
 8003904:	f7ff ffc2 	bl	800388c <sbrk_aligned>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	4604      	mov	r4, r0
 800390c:	d14d      	bne.n	80039aa <_malloc_r+0xde>
 800390e:	6834      	ldr	r4, [r6, #0]
 8003910:	4626      	mov	r6, r4
 8003912:	2e00      	cmp	r6, #0
 8003914:	d140      	bne.n	8003998 <_malloc_r+0xcc>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	4631      	mov	r1, r6
 800391a:	4638      	mov	r0, r7
 800391c:	eb04 0803 	add.w	r8, r4, r3
 8003920:	f000 f878 	bl	8003a14 <_sbrk_r>
 8003924:	4580      	cmp	r8, r0
 8003926:	d13a      	bne.n	800399e <_malloc_r+0xd2>
 8003928:	6821      	ldr	r1, [r4, #0]
 800392a:	3503      	adds	r5, #3
 800392c:	1a6d      	subs	r5, r5, r1
 800392e:	f025 0503 	bic.w	r5, r5, #3
 8003932:	3508      	adds	r5, #8
 8003934:	2d0c      	cmp	r5, #12
 8003936:	bf38      	it	cc
 8003938:	250c      	movcc	r5, #12
 800393a:	4629      	mov	r1, r5
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ffa5 	bl	800388c <sbrk_aligned>
 8003942:	3001      	adds	r0, #1
 8003944:	d02b      	beq.n	800399e <_malloc_r+0xd2>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	442b      	add	r3, r5
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	e00e      	b.n	800396c <_malloc_r+0xa0>
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	1b52      	subs	r2, r2, r5
 8003952:	d41e      	bmi.n	8003992 <_malloc_r+0xc6>
 8003954:	2a0b      	cmp	r2, #11
 8003956:	d916      	bls.n	8003986 <_malloc_r+0xba>
 8003958:	1961      	adds	r1, r4, r5
 800395a:	42a3      	cmp	r3, r4
 800395c:	6025      	str	r5, [r4, #0]
 800395e:	bf18      	it	ne
 8003960:	6059      	strne	r1, [r3, #4]
 8003962:	6863      	ldr	r3, [r4, #4]
 8003964:	bf08      	it	eq
 8003966:	6031      	streq	r1, [r6, #0]
 8003968:	5162      	str	r2, [r4, r5]
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	4638      	mov	r0, r7
 800396e:	f104 060b 	add.w	r6, r4, #11
 8003972:	f000 f865 	bl	8003a40 <__malloc_unlock>
 8003976:	f026 0607 	bic.w	r6, r6, #7
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	1af2      	subs	r2, r6, r3
 800397e:	d0b6      	beq.n	80038ee <_malloc_r+0x22>
 8003980:	1b9b      	subs	r3, r3, r6
 8003982:	50a3      	str	r3, [r4, r2]
 8003984:	e7b3      	b.n	80038ee <_malloc_r+0x22>
 8003986:	6862      	ldr	r2, [r4, #4]
 8003988:	42a3      	cmp	r3, r4
 800398a:	bf0c      	ite	eq
 800398c:	6032      	streq	r2, [r6, #0]
 800398e:	605a      	strne	r2, [r3, #4]
 8003990:	e7ec      	b.n	800396c <_malloc_r+0xa0>
 8003992:	4623      	mov	r3, r4
 8003994:	6864      	ldr	r4, [r4, #4]
 8003996:	e7b2      	b.n	80038fe <_malloc_r+0x32>
 8003998:	4634      	mov	r4, r6
 800399a:	6876      	ldr	r6, [r6, #4]
 800399c:	e7b9      	b.n	8003912 <_malloc_r+0x46>
 800399e:	230c      	movs	r3, #12
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4638      	mov	r0, r7
 80039a4:	f000 f84c 	bl	8003a40 <__malloc_unlock>
 80039a8:	e7a1      	b.n	80038ee <_malloc_r+0x22>
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	e7de      	b.n	800396c <_malloc_r+0xa0>
 80039ae:	bf00      	nop
 80039b0:	20000288 	.word	0x20000288

080039b4 <_realloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	4680      	mov	r8, r0
 80039ba:	4614      	mov	r4, r2
 80039bc:	460e      	mov	r6, r1
 80039be:	b921      	cbnz	r1, 80039ca <_realloc_r+0x16>
 80039c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	4611      	mov	r1, r2
 80039c6:	f7ff bf81 	b.w	80038cc <_malloc_r>
 80039ca:	b92a      	cbnz	r2, 80039d8 <_realloc_r+0x24>
 80039cc:	f7ff ff12 	bl	80037f4 <_free_r>
 80039d0:	4625      	mov	r5, r4
 80039d2:	4628      	mov	r0, r5
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	f000 f838 	bl	8003a4c <_malloc_usable_size_r>
 80039dc:	4284      	cmp	r4, r0
 80039de:	4607      	mov	r7, r0
 80039e0:	d802      	bhi.n	80039e8 <_realloc_r+0x34>
 80039e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039e6:	d812      	bhi.n	8003a0e <_realloc_r+0x5a>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f7ff ff6e 	bl	80038cc <_malloc_r>
 80039f0:	4605      	mov	r5, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d0ed      	beq.n	80039d2 <_realloc_r+0x1e>
 80039f6:	42bc      	cmp	r4, r7
 80039f8:	4622      	mov	r2, r4
 80039fa:	4631      	mov	r1, r6
 80039fc:	bf28      	it	cs
 80039fe:	463a      	movcs	r2, r7
 8003a00:	f7ff fed0 	bl	80037a4 <memcpy>
 8003a04:	4631      	mov	r1, r6
 8003a06:	4640      	mov	r0, r8
 8003a08:	f7ff fef4 	bl	80037f4 <_free_r>
 8003a0c:	e7e1      	b.n	80039d2 <_realloc_r+0x1e>
 8003a0e:	4635      	mov	r5, r6
 8003a10:	e7df      	b.n	80039d2 <_realloc_r+0x1e>
	...

08003a14 <_sbrk_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d06      	ldr	r5, [pc, #24]	; (8003a30 <_sbrk_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd f972 	bl	8000d08 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_sbrk_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_sbrk_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20000290 	.word	0x20000290

08003a34 <__malloc_lock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__malloc_lock+0x8>)
 8003a36:	f000 b811 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000294 	.word	0x20000294

08003a40 <__malloc_unlock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__malloc_unlock+0x8>)
 8003a42:	f000 b80c 	b.w	8003a5e <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000294 	.word	0x20000294

08003a4c <_malloc_usable_size_r>:
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f18      	subs	r0, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfbc      	itt	lt
 8003a56:	580b      	ldrlt	r3, [r1, r0]
 8003a58:	18c0      	addlt	r0, r0, r3
 8003a5a:	4770      	bx	lr

08003a5c <__retarget_lock_acquire_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_release_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
